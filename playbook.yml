# playbook.yml
#
# This playbook demonstrates multiple methods to interact with F5OS devices using Ansible:
# 1. Using F5OS-specific Ansible modules from the F5 Ansible collection
#    - Connects via HTTPS to F5OS REST API
#    - Uses F5OS maintained collection modules
#    - Best for F5OS platform operations with verified modules
#
# 2. Using Ansible uri module to make direct REST API calls
#    - Connects via HTTPS to F5OS REST API
#    - Uses Ansible built-in uri module
#    - Best for custom REST API operations or when collection modules unavailable
#
# 3. Using SSH connection to access the underlying Linux OS
#    - Connects via SSH as root to Linux shell
#    - Uses Ansible built-in setup modules
#    - Best for system-level operations and diagnostics
#
# 4. Using SSH to connect as admin and run F5OS CLI commands
#    - Connects via SSH as admin to F5OS CLI
#    - Uses Ansible built-in shell module with sshpass
#    - Best for running operational commands and gathering CLI output
#
# 5. Using SSH connection to access the underlying Linux OS
#    - Connects via SSH as root to Linux shell
#    - Uses Ansible built-in SSH modules
#    - Uses Ansible built-in copy module to transfer Bash script
#    - Uses Ansible built-in shell module to execute script and display output
#    - Best for automated script-based management via f5sh commands
#
# Requirements:
# - sshpass must be installed on the Ansible control node for F5OS CLI access
#   Ubuntu/Debian: sudo apt-get install sshpass
#   RHEL/CentOS: sudo yum install sshpass
#
# References:
# - F5OS Collection: https://clouddocs.f5.com/products/orchestration/ansible/devel/f5os/F5OS-index.html
# - Ansible URI Module: https://docs.ansible.com/ansible/latest/collections/ansible/builtin/uri_module.html
# - F5OS-A/F5 rSeries - API: https://clouddocs.f5.com/api/rseries-api/rseries-api-index.html
# - Ansible SSH Connection: https://docs.ansible.com/ansible/latest/collections/ansible/builtin/ssh_connection.html
# - F5OS-A/F5 rSeries - CLI: https://clouddocs.f5.com/api/rseries-api/rseries-cli-index.html
#
# Debug Notes:
# - Each connection method has debug lines (commented out) that can be enabled
# - Uncomment Debug Info lines when troubleshooting connection issues
# - Use -vvvv verbosity for additional connection debugging
# - CLI task can be modified to show stderr/stdout with no_log: false
---
- name: F5OS Management Tasks
  connection: httpapi
  hosts: r5900-2-api
  gather_facts: false
  collections:
    - f5networks.f5os
  any_errors_fatal: true

  vars_prompt:
    - name: f5os_api_password
      prompt: "ENTER F5OS REST API password (admin user):"
      private: yes
    - name: f5os_cli_password
      prompt: "ENTER F5OS CLI SSH password (admin user):"
      private: yes

  vars:
    ansible_user: "admin"
    ansible_httpapi_password: "{{ f5os_api_password }}"
    ansible_network_os: "f5networks.f5os.f5os"
    ansible_httpapi_use_ssl: true
    ansible_httpapi_use_proxy: false
    ansible_httpapi_validate_certs: "no"
    ansible_httpapi_port: 8888
    ansible_command_timeout: 1800
    persistent_log_messages: true
    api_base_url: "https://{{ ansible_host }}:{{ ansible_httpapi_port }}/restconf"

  tasks:
    # Method 1: Using F5OS collection modules
    - name: Get F5OS system information using F5OS Ansible module
      f5os_device_info:
        gather_subset:
          - system-info
      register: f5os_facts

    # Method 2: Using generic Ansible uri module for REST API
    - name: Get F5OS version information using REST API direct call
      uri:
        url: "{{ api_base_url }}/data/openconfig-system:system/f5-system-version:version"
        method: GET
        force_basic_auth: true
        user: "{{ ansible_user }}"
        password: "{{ ansible_httpapi_password }}"
        headers:
          Content-Type: "application/yang-data+json"
          Accept: "application/yang-data+json"
        validate_certs: "{{ ansible_httpapi_validate_certs }}"
        status_code: 200
        return_content: true
      register: f5os_version

    # Method 3: Using generic Ansible SSH for Linux system access
    - name: Gather Linux system information via SSH connection
      setup:
        gather_subset:
          - hardware
      delegate_to: r5900-2-linux
      vars:
        ansible_user: root
        ansible_connection: ssh
      register: linux_facts

    # Method 4: Using generic Ansible shell module for F5OS CLI
    - name: Get F5OS version information via CLI
      shell: |
        sshpass -p "{{ f5os_cli_password }}" ssh -t -o StrictHostKeyChecking=no admin@{{ hostvars['r5900-2-cli']['ansible_host'] }} << 'EOF'
        show sys version
        EOF
      delegate_to: localhost
      register: cli_version
      changed_when: false
      # no_log: false      # Uncomment to show CLI output for debugging
      # failed_when: false # Uncomment to prevent CLI failures for debugging

    # Method : Using Ansible copy and shell modules to run f5sh commands from Bash scripts5
    - name: Transfer f5sh_example.sh script to F5OS device
      copy:
        content: |
          #!/bin/bash
          f5sh show sys version
        dest: "/root/f5sh_example.sh"
        mode: '0755'
      delegate_to: r5900-2-linux
      vars:
        ansible_user: root
        ansible_connection: ssh
      register: script_transfer

    - name: Execute f5sh_example.sh script on F5OS device
      shell: "/root/f5sh_example.sh"
      delegate_to: r5900-2-linux
      vars:
        ansible_user: root
        ansible_connection: ssh
      register: script_output

    # Display combined information from all five methods
    - name: Show combined information from all sources
      vars:
        system_info:
          "F5OS Version Info (via F5 maintained F5OS Ansible module collection, communicating over HTTPS REST API, using: admin account)":
            "Platform Type": "{{ f5os_facts.system_info.platform_type }}"
            "Software Version": "{{ f5os_facts.system_info.running_software.os_version }}"
            # "Debug Info": "{{ f5os_facts | default('f5os_facts not defined') }}"
          "F5OS Version Info (via built-in Ansible uri module, communicating over HTTPS REST API, using: admin account)":
            "OS Version": "{{ f5os_version.json['f5-system-version:version']['os-version'] }}"
            "Product": "{{ f5os_version.json['f5-system-version:version']['product'] }}"
            "Service Version": "{{ f5os_version.json['f5-system-version:version']['service-version'] }}"
            # "Debug Info": "{{ f5os_version | default('f5os_version not defined') }}"
          "Linux System Info (via built-in Ansible ssh module, communicating over SSH, using: root account and bash shell)":
            "Distribution": "{{ linux_facts.ansible_facts.ansible_distribution }}"
            "Kernel Version": "{{ linux_facts.ansible_facts.ansible_kernel }}"
            "Python Version": "{{ linux_facts.ansible_facts.ansible_python_version }}"
            "Total Memory": "{{ linux_facts.ansible_facts.ansible_memtotal_mb }} MB"
            # "Debug Info": "{{ linux_facts | default('linux_facts not defined') }}"
          "F5OS Version Info (via built-in Ansible ssh module, communicating over SSH, using: admin account and f5_confd_cli shell)":
            "OS Version": "{{ cli_version.stdout_lines[0].split()[-1] if cli_version is defined and cli_version.rc == 0 else 'Error getting CLI version' }}"
            "Service Version": "{{ cli_version.stdout_lines[1].split()[-1] if cli_version is defined and cli_version.rc == 0 else 'Error getting CLI version' }}"
            "Product": "{{ cli_version.stdout_lines[2].split()[-1] if cli_version is defined and cli_version.rc == 0 else 'Error getting CLI version' }}"
            # "CLI Return Code": "{{ cli_version.rc | default('rc not defined') }}"
            # "CLI STDOUT": "{{ cli_version.stdout_lines | default('stdout not defined') }}"
            # "CLI STDERR": "{{ cli_version.stderr_lines | default('stderr not defined') }}"
            # "Debug Info": "{{ cli_version | default('cli_version not defined') }}"
          "F5OS Version Info (via built-in Ansible script copy and execution modules, using: root account, bash shell, and f5sh commands)":
            "OS Version": "{{ script_output.stdout_lines[0].split()[-1] if script_output is defined and script_output.rc == 0 else 'Error executing script' }}"
            "Product": "{{ script_output.stdout_lines[2].split()[-1] if script_output is defined and script_output.rc == 0 else 'Error executing script' }}"
            "Service Version": "{{ script_output.stdout_lines[1].split()[-1] if script_output is defined and script_output.rc == 0 else 'Error executing script' }}"
            # "Script Return Code": "{{ script_output.rc | default('rc not defined') }}"
            # "Script STDOUT": "{{ script_output.stdout_lines | default('stdout not defined') }}"
            # "Script STDERR": "{{ script_output.stderr_lines | default('stderr not defined') }}"
            # "Debug Info": "{{ script_output | default('script_output not defined') }}"
      debug:
        var: system_info
